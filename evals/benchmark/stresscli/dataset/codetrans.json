[
    {
        "length": "50",
        "input":
        {
            "language_from": "Python",
            "language_to": "Rust",
            "source_code": "'''Rust\nprint(\"Hello!\")'''"
        }
    },

    {
        "length": "100",
        "input": {
            "language_from": "Rust",
            "language_to": "Python",
            "source_code": "'''Rust\nfn main() {\n    let x = 5;\n    let x = x + 1;\n    let x = x * 2;\n    println!(\"The value of x is: {}\", x);\n}'''"
        }
    },

    {
        "length": "500",
        "input": {
            "language_from": "C++",
            "language_to": "Python",
            "source_code": "\n    #include <iostream>\n    #include <vector>\n    #include <string>\n    #include <algorithm>\n\n    class Student {\n    public:\n        Student(std::string name, int age, std::vector<int> grades)\n            : name(name), age(age), grades(grades) {}\n\n        double average_grade() const {\n            int sum = 0;\n            for (int grade : grades) {\n                sum += grade;\n            }\n            return static_cast<double>(sum) / grades.size();\n        }\n\n        void print_info() const {\n            std::cout << \"Name: \" << name << \", Age: \" << age << \", Average Grade: \" \n                    << average_grade() << std::endl;\n        }\n\n    private:\n        std::string name;\n        int age;\n        std::vector<int> grades;\n    };\n\n    int main() {\n        std::vector<Student> students = {\n            Student(\"Alice\", 20, {85, 90, 78}),\n            Student(\"Bob\", 21, {88, 92, 80}),\n            Student(\"Charlie\", 19, {95, 89, 84}),\n            Student(\"David\", 22, {72, 85, 90}),\n            Student(\"Eve\", 20, {88, 76, 95}),\n            Student(\"Frank\", 24, {88, 76, 95})\n        };\n\n        std::sort(students.begin(), students.end(), [](const Student& a, const Student& b) {\n            return a.average_grade() > b.average_grade();\n        });\n\n        for (const Student& student : students) {\n            student.print_info();\n        }\n\n        return 0;\n    }\n    "
        }

    },

    {
        "length": "1k",
            "input": {
            "language_from": "Java",
            "language_to": "Python",
            "source_code": "\n    import java.util.ArrayList;\n    import java.util.Collections;\n    import java.util.Comparator;\n    import java.util.HashMap;\n    import java.util.List;\n    import java.util.Map;\n\n    class Student {\n        private String name;\n        private int age;\n        private List<Integer> grades;\n\n        public Student(String name, int age, List<Integer> grades) {\n            this.name = name;\n            this.age = age;\n            this.grades = grades;\n        }\n\n        public double averageGrade() {\n            int sum = 0;\n            for (int grade : grades) {\n                sum += grade;\n            }\n            return (double) sum / grades.size();\n        }\n\n        public void printInfo() {\n            System.out.printf(\"======== print info of %s =========\", this.name);\n            System.out.printf(\"Name: %s, Age: %d, Average Grade: %.2f\n\", name, age, averageGrade());\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public int getAge() {\n            return age;\n        }\n\n        public List<Integer> getGrades() {\n            return grades;\n        }\n    }\n\n    public class Main {\n        public static void main(String[] args) {\n            List<Student> students = new ArrayList<>();\n            students.add(new Student(\"Alice\", 20, List.of(85, 90, 78)));\n            students.add(new Student(\"Bob\", 21, List.of(88, 92, 80)));\n            students.add(new Student(\"Charlie\", 19, List.of(95, 89, 84)));\n            students.add(new Student(\"David\", 22, List.of(72, 85, 90)));\n            students.add(new Student(\"Eve\", 20, List.of(88, 76, 95)));\n            students.add(new Student(\"Frank\", 23, List.of(91, 82, 88)));\n            students.add(new Student(\"Grace\", 21, List.of(79, 85, 87)));\n            students.add(new Student(\"Heidi\", 20, List.of(92, 91, 89)));\n            students.add(new Student(\"Ivan\", 22, List.of(84, 79, 85)));\n            students.add(new Student(\"Judy\", 23, List.of(75, 80, 78)));\n\n            Collections.sort(students, Comparator.comparingDouble(Student::averageGrade).reversed());\n\n\n           for (Student student : students) {\n                student.printInfo();\n            }\n\n            printClassInfo(students);\n        }\n\n        public static void printClassInfo(List<Student> students) {\n            Map<Integer, Integer> ageDistribution = new HashMap<>();\n            double totalAverageGrade = 0.0;\n            int totalGradesCount = 0;\n\n            for (Student student : students) {\n                ageDistribution.put(student.getAge(), ageDistribution.getOrDefault(student.getAge(), 0) + 1);\n                totalAverageGrade += student.averageGrade() * student.getGrades().size();\n                totalGradesCount += student.getGrades().size();\n            }\n            totalAverageGrade /= totalGradesCount;\n\n            System.out.printf(\"Class Average Grade: %.2f\n\", totalAverageGrade);\n            System.out.println(\"Age Distribution:\");\n            for (Map.Entry<Integer, Integer> entry : ageDistribution.entrySet()) {\n                System.out.printf(\"Age %d: %d students\n\", entry.getKey(), entry.getValue());\n            }        }\n    }\n    "
        }
    },

    {
        "length": "2k",
        "input": {
            "language_from": "Python",
            "language_to": "Java",
            "source_code": "\n    import random\n    import string\n    import math\nfrom collections import Counter\nfrom itertools import permutations\n    from functools import lru_cache\n\n    # Function to generate a random string of fixed length\ndef generate_random_string(length):\nreturn ''.join(random.choices(string.ascii_letters + string.digits, k=length))\n\n# Function to calculate factorial\ndef factorial(n):\nif n == 0 or n == 1:\n            return 1\nelse:\n            return n * factorial(n - 1)\n\n    # Function to compute the n-th Fibonacci number using memoization\n    @lru_cache(maxsize=None)\ndef fibonacci(n):\n        if n < 0:\n            raise ValueError(\"Input should be a non-negative integer\")\n        elif n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n - 1) + fibonacci(n - 2)\n\n    # Function to calculate the Euclidean distance between two points in 3D space\n    def euclidean_distance(point1, point2):\n        if len(point1) != 3 or len(point2) != 3:\n            raise ValueError(\"Both points must have three coordinates\")\n        return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2 + (point1[2] - point2[2]) ** 2)\n\n    # Function to count the frequency of each character in a string\n    def char_frequency(input_string):\n        return dict(Counter(input_string))\n    # Function to generate all permutations of a list\n    def generate_permutations(input_list):\n        return list(permutations(input_list))\n\n    # Function to check if a string is a palindrome\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    # Function to find the greatest common divisor (GCD) of two numbers\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Function to perform a binary search on a sorted list\n    def binary_search(arr, target):\n        low, high = 0, len(arr) - 1\n       while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == target:\n                return mid\n            elif arr[mid] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return -1\n\n    # Function to compute the area of a circle given its radius\n    def circle_area(radius):\n        if radius < 0:\nraise ValueError(\"Radius cannot be negative\")\n        return math.pi * radius ** 2\n    # Function to sort a list using quicksort algorithm\n    def quicksort(arr):\n        if len(arr) <= 1:\n            return arr\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quicksort(left) + middle + quicksort(right)\n\n    # Function to find the longest common subsequence (LCS) of two strings\n    def lcs(X, Y):\n        m = len(X)\n        n = len(Y)\n        L = [[None] * (n + 1) for i in range(m + 1)]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0 or j == 0:\n                    L[i][j] = 0\n                elif X[i - 1] == Y[j - 1]:\n                    L[i][j] = L[i - 1][j - 1] + 1\n                else:\n                    L[i][j] = max(L[i - 1][j], L[i][j - 1])\n        return L[m][n]\n\n    # Function to generate a list of prime numbers up to a given limit\n    def sieve_of_eratosthenes(limit):\n        primes = [True] * (limit + 1)\n        p = 2\n        while (p * p <= limit):\n            if (primes[p] == True):\n                for i in range(p * p, limit + 1, p):\n                    primes[i] = False\n            p += 1\n        return [p for p in range(2, limit + 1) if primes[p]]\n\n    # Function to perform matrix multiplication\n    def matrix_multiply(A, B):\n        if len(A[0]) != len(B):\n            raise ValueError(\"Number of columns in A must be equal to number of rows in B\")\n        result = [[sum(x * y for x, y in zip(A_row, B_col)) for B_col in zip(*B)] for A_row in A]\n        return result\n\n    # Function to compute the dot product of two vectors\n    def dot_product(vector1, vector2):\n        if len(vector1) != len(vector2):\n            raise ValueError(\"Vectors must be of same length\")\n        return sum(x * y for x, y in zip(vector1, vector2))\n\n    # Function to perform a depth-first search (DFS) in a graph\n    def dfs(graph, start, visited=None):\n        if visited is None:\n            visited = set()\n        visited.add(start)\n        for next in graph[start] - visited:\n            dfs(graph, next, visited)\n        return visited\n\n    # Function to perform a breadth-first search (BFS) in a graph\n    def bfs(graph, start):\n        visited, queue = set(), [start]\n        while queue:\n            vertex = queue.pop(0)\n            if vertex not in visited:\n                visited.add(vertex)\n               queue.extend(graph[vertex] - visited)\n        return visited\n\n    # Function to compute the edit distance between two strings\n    def edit_distance(str1, str2):\n        m = len(str1)\n        n = len(str2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0:\n                    dp[i][j] = j\n                elif j == 0:\n                    dp[i][j] = i\n                elif str1[i - 1] == str2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n        return dp[m][n]\n\n    def is_perfect_square(n):\n        return n == int(math.sqrt(n)) ** 2\n\n    # Function to compute the power of a number using recursion\n    def power(base, exp):\n        if exp == 0:\n            return 1\n        elif exp % 2 == 0:\n            half = power(base, exp // 2)\n            return half * half\n        else:\n            return base * power(base, exp - 1)\n\n    # Function to merge two sorted lists\n    def merge_sorted_lists(list1, list2):\n        sorted_list = []\n        i = j = 0\n        while i < len(list1) and j < len(list2):\n            if list1[i] < list2[j]:\n                sorted_list.append(list1[i])\n                i += 1\n            else:\n                sorted_list.append(list2[j])\n                j += 1\n        sorted_list.extend(list1[i:])\n        sorted_list.extend(list2[j:])\n        return sorted_list\n    "
        }
    },

    {
        "length": "3k",
        "input": {
            "language_from": "Python",
            "language_to": "Java",
            "source_code": "\nimport random\nimport string\nimport math\nfrom collections import Counter\nfrom itertools import permutations\nfrom functools import lru_cache\n\n# Function to generate a random string of fixed length\ndef generate_random_string(length):\n return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\n\n# Function to calculate factorial\ndef factorial(n):\n if n == 0 or n == 1:\n return 1\n else:\n return n * factorial(n - 1)\n\n# Function to compute the n-th Fibonacci number using memoization\n@lru_cache(maxsize=None)\ndef fibonacci(n):\n if n < 0:\n raise ValueError(\\\"Input should be a non-negative integer\\\")\n elif n == 0:\n return 0\n elif n == 1:\n return 1\n else:\n return fibonacci(n - 1) + fibonacci(n - 2)\n\n# Function to calculate the Euclidean distance between two points in 3D space\ndef euclidean_distance(point1, point2):\n if len(point1) != 3 or len(point2) != 3:\n raise ValueError(\\\"Both points must have three coordinates\\\")\n return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2 + (point1[2] - point2[2]) ** 2)\n\n# Function to count the frequency of each character in a string\ndef char_frequency(input_string):\n return dict(Counter(input_string))\n\n# Function to generate all permutations of a list\ndef generate_permutations(input_list):\n return list(permutations(input_list))\n\n# Function to check if a string is a palindrome\ndef is_palindrome(s):\n return s == s[::-1]\n\n# Function to find the greatest common divisor (GCD) of two numbers\ndef gcd(a, b):\n while b:\n a, b = b, a % b\n return a\n\n# Function to perform a binary search on a sorted list\ndef binary_search(arr, target):\n low, high = 0, len(arr) - 1\n while low <= high:\n mid = (low + high) // 2\n if arr[mid] == target:\n return mid\n elif arr[mid] < target:\n low = mid + 1\n else:\n high = mid - 1\n return -1\n\n# Function to compute the area of a circle given its radius\ndef circle_area(radius):\n if radius < 0:\n raise ValueError(\\\"Radius cannot be negative\\\")\n return math.pi * radius ** 2\n\n# Function to sort a list using quicksort algorithm\ndef quicksort(arr):\n if len(arr) <= 1:\n return arr\n pivot = arr[len(arr) // 2]\n left = [x for x in arr if x < pivot]\n middle = [x for x in arr if x == pivot]\n right = [x for x in arr if x > pivot]\n return quicksort(left) + middle + quicksort(right)\n\n# Function to find the longest common subsequence (LCS) of two strings\ndef lcs(X, Y):\n m = len(X)\n n = len(Y)\n L = [[None] * (n + 1) for i in range(m + 1)]\n for i in range(m + 1):\n for j in range(n + 1):\n if i == 0 or j == 0:\n L[i][j] = 0\n elif X[i - 1] == Y[j - 1]:\n L[i][j] = L[i - 1][j - 1] + 1\n else:\n L[i][j] = max(L[i - 1][j], L[i][j - 1])\n return L[m][n]\n\n# Function to generate a list of prime numbers up to a given limit\ndef sieve_of_eratosthenes(limit):\n primes = [True] * (limit + 1)\n p = 2\n while (p * p <= limit):\n if (primes[p] == True):\n for i in range(p * p, limit + 1, p):\n primes[i] = False\n p += 1\n return [p for p in range(2, limit + 1) if primes[p]]\n\n# Function to perform matrix multiplication\ndef matrix_multiply(A, B):\n if len(A[0]) != len(B):\n raise ValueError(\\\"Number of columns in A must be equal to number of rows in B\\\")\n result = [[sum(x * y for x, y in zip(A_row, B_col)) for B_col in zip(*B)] for A_row in A]\n return result\n\n# Function to compute the dot product of two vectors\ndef dot_product(vector1, vector2):\n if len(vector1) != len(vector2):\n raise ValueError(\\\"Vectors must be of same length\\\")\n return sum(x * y for x, y in zip(vector1, vector2))\n\n# Function to perform a depth-first search (DFS) in a graph\ndef dfs(graph, start, visited=None):\n if visited is None:\n visited = set()\n visited.add(start)\n for next in graph[start] - visited:\n dfs(graph, next, visited)\n return visited\n\n# Function to perform a breadth-first search (BFS) in a graph\ndef bfs(graph, start):\n visited, queue = set(), [start]\n while queue:\n vertex = queue.pop(0)\n if vertex not in visited:\n visited.add(vertex)\n queue.extend(graph[vertex] - visited)\n return visited\n\n# Function to compute the edit distance between two strings\ndef edit_distance(str1, str2):\n m = len(str1)\n n = len(str2)\n dp = [[0] * (n + 1) for _ in range(m + 1)]\n for i in range(m + 1):\n for j in range(n + 1):\n if i == 0:\n dp[i][j] = j\n elif j == 0:\n dp[i][j] = i\n elif str1[i - 1] == str2[j - 1]:\n dp[i][j] = dp[i - 1][j - 1]\n else:\n dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n return dp[m][n]\n\n# Function to check if a number is a perfect square\ndef is_perfect_square(n):\n return n == int(math.sqrt(n)) ** 2\n\n# Function to compute the power of a number using recursion\ndef power(base, exp):\n if exp == 0:\n return 1\n elif exp % 2 == 0:\n half = power(base, exp // 2)\n return half * half\n else:\n return base * power(base, exp - 1)\n\n# Function to merge two sorted lists\ndef merge_sorted_lists(list1, list2):\n sorted_list = []\n i = j = 0\n while i < len(list1) and j < len(list2):\n if list1[i] < list2[j]:\n sorted_list.append(list1[i])\n i += 1\n else:\n sorted_list.append(list2[j])\n j += 1\n sorted_list.extend(list1[i:])\n sorted_list.extend(list2[j:])\n return sorted_list\n\n# Function to count the number of vowels in a string\ndef count_vowels(s):\n vowels = \\\"aeiouAEIOU\\\"\n return sum(1 for char in s if char in vowels)\n\n# Function to reverse the words in a string\ndef reverse_words(s):\n return ' '.join(s.split()[::-1])\n\n# Function to convert a decimal number to binary\ndef decimal_to_binary(n):\n return bin(n).replace(\\\"0b\\\", \\\"\\\")\n\n# Function to check if two strings are anagrams\ndef are_anagrams(str1, str2):\n return Counter(str1) == Counter(str2)\n\n# Function to find the longest increasing subsequence in an array\ndef longest_increasing_subsequence(arr):\n if not arr:\n return []\n dp = [1] * len(arr)\n for i in range(1, len(arr)):\n for j in range(i):\n if arr[i] > arr[j]:\n dp[i] = max(dp[i], dp[j] + 1)\n length = max(dp)\n lis = []\n for i in range(len(dp) - 1, -1, -1):\n if dp[i] == length:\n lis.append(arr[i])\n length -= 1\n return lis[::-1]\n\n# Function to generate Pascal's triangle up to n rows\ndef generate_pascals_triangle(n):\n triangle = []\n for i in range(n):\n row = [1] * (i + 1)\n for j in range 1, i):\n row"
        }
    }
]
